// Code generated by MockGen. DO NOT EDIT.
// Source: C:/Users/lhx23/learn-git/circle/dao/user_dao.go

// Package test is a generated GoMock package.
package test

import (
	models "circle/models"
	request "circle/request"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserDaoInterface is a mock of UserDaoInterface interface.
type MockUserDaoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserDaoInterfaceMockRecorder
}

// MockUserDaoInterfaceMockRecorder is the mock recorder for MockUserDaoInterface.
type MockUserDaoInterfaceMockRecorder struct {
	mock *MockUserDaoInterface
}

// NewMockUserDaoInterface creates a new mock instance.
func NewMockUserDaoInterface(ctrl *gomock.Controller) *MockUserDaoInterface {
	mock := &MockUserDaoInterface{ctrl: ctrl}
	mock.recorder = &MockUserDaoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDaoInterface) EXPECT() *MockUserDaoInterfaceMockRecorder {
	return m.recorder
}

// CountUsers mocks base method.
func (m *MockUserDaoInterface) CountUsers() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsers")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsers indicates an expected call of CountUsers.
func (mr *MockUserDaoInterfaceMockRecorder) CountUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsers", reflect.TypeOf((*MockUserDaoInterface)(nil).CountUsers))
}

// CountUsersByEmail mocks base method.
func (m *MockUserDaoInterface) CountUsersByEmail(email string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsersByEmail", email)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsersByEmail indicates an expected call of CountUsersByEmail.
func (mr *MockUserDaoInterfaceMockRecorder) CountUsersByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsersByEmail", reflect.TypeOf((*MockUserDaoInterface)(nil).CountUsersByEmail), email)
}

// CountUsersByName mocks base method.
func (m *MockUserDaoInterface) CountUsersByName(name string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsersByName", name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsersByName indicates an expected call of CountUsersByName.
func (mr *MockUserDaoInterfaceMockRecorder) CountUsersByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsersByName", reflect.TypeOf((*MockUserDaoInterface)(nil).CountUsersByName), name)
}

// CreateUser mocks base method.
func (m *MockUserDaoInterface) CreateUser(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserDaoInterfaceMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserDaoInterface)(nil).CreateUser), user)
}

// CreateUserpractice mocks base method.
func (m *MockUserDaoInterface) CreateUserpractice(userpractice *models.UserPractice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserpractice", userpractice)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserpractice indicates an expected call of CreateUserpractice.
func (mr *MockUserDaoInterfaceMockRecorder) CreateUserpractice(userpractice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserpractice", reflect.TypeOf((*MockUserDaoInterface)(nil).CreateUserpractice), userpractice)
}

// GetAllPracticeByUserid mocks base method.
func (m *MockUserDaoInterface) GetAllPracticeByUserid(userid int) request.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPracticeByUserid", userid)
	ret0, _ := ret[0].(request.Result)
	return ret0
}

// GetAllPracticeByUserid indicates an expected call of GetAllPracticeByUserid.
func (mr *MockUserDaoInterfaceMockRecorder) GetAllPracticeByUserid(userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPracticeByUserid", reflect.TypeOf((*MockUserDaoInterface)(nil).GetAllPracticeByUserid), userid)
}

// GetHistoryPracticeByUserid mocks base method.
func (m *MockUserDaoInterface) GetHistoryPracticeByUserid(userid int) ([]models.Practicehistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryPracticeByUserid", userid)
	ret0, _ := ret[0].([]models.Practicehistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryPracticeByUserid indicates an expected call of GetHistoryPracticeByUserid.
func (mr *MockUserDaoInterfaceMockRecorder) GetHistoryPracticeByUserid(userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryPracticeByUserid", reflect.TypeOf((*MockUserDaoInterface)(nil).GetHistoryPracticeByUserid), userid)
}

// GetHistoryTestByUserid mocks base method.
func (m *MockUserDaoInterface) GetHistoryTestByUserid(userid int) ([]models.Testhistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryTestByUserid", userid)
	ret0, _ := ret[0].([]models.Testhistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryTestByUserid indicates an expected call of GetHistoryTestByUserid.
func (mr *MockUserDaoInterfaceMockRecorder) GetHistoryTestByUserid(userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryTestByUserid", reflect.TypeOf((*MockUserDaoInterface)(nil).GetHistoryTestByUserid), userid)
}

// GetIdByUser mocks base method.
func (m *MockUserDaoInterface) GetIdByUser(name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdByUser", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdByUser indicates an expected call of GetIdByUser.
func (mr *MockUserDaoInterfaceMockRecorder) GetIdByUser(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdByUser", reflect.TypeOf((*MockUserDaoInterface)(nil).GetIdByUser), name)
}

// GetPracticeByUserid mocks base method.
func (m *MockUserDaoInterface) GetPracticeByUserid(userid int) ([]models.Practice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPracticeByUserid", userid)
	ret0, _ := ret[0].([]models.Practice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPracticeByUserid indicates an expected call of GetPracticeByUserid.
func (mr *MockUserDaoInterfaceMockRecorder) GetPracticeByUserid(userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPracticeByUserid", reflect.TypeOf((*MockUserDaoInterface)(nil).GetPracticeByUserid), userid)
}

// GetTestByUserid mocks base method.
func (m *MockUserDaoInterface) GetTestByUserid(userid int) ([]models.Test, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestByUserid", userid)
	ret0, _ := ret[0].([]models.Test)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestByUserid indicates an expected call of GetTestByUserid.
func (mr *MockUserDaoInterfaceMockRecorder) GetTestByUserid(userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestByUserid", reflect.TypeOf((*MockUserDaoInterface)(nil).GetTestByUserid), userid)
}

// GetUserByEmail mocks base method.
func (m *MockUserDaoInterface) GetUserByEmail(email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserDaoInterfaceMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserDaoInterface)(nil).GetUserByEmail), email)
}

// GetUserByID mocks base method.
func (m *MockUserDaoInterface) GetUserByID(id int) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserDaoInterfaceMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserDaoInterface)(nil).GetUserByID), id)
}

// GetUserByName mocks base method.
func (m *MockUserDaoInterface) GetUserByName(name string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", name)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockUserDaoInterfaceMockRecorder) GetUserByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockUserDaoInterface)(nil).GetUserByName), name)
}

// UpdateUser mocks base method.
func (m *MockUserDaoInterface) UpdateUser(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserDaoInterfaceMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserDaoInterface)(nil).UpdateUser), user)
}
